#ifndef RANDOM_H
#define RANDOM_H

#include "Define.h.fsl"

// ref: https://shadertoy.com/view/XlGcRh
uint nextRandom(inout(uint) seed)
{
    seed = seed * 747796405 + 2891336453;
    uint result = ((seed >> ((seed >> 28) + 4)) ^ seed) * 277803737;
    result = (result >> 22) ^ result;
    return result;
}

// ref: https://github.com/SebLague
float randomValue(inout(uint) seed)
{
    return nextRandom(seed) / 4294967295.0; // 2^32 - 1
}

// ref: https://stackoverflow.com/a/6178290
float randomFromNormalDistribution(inout(uint) seed)
{
    float  theta = 2 * 3.1415926 * randomValue(seed);
    float  rho = sqrt(-2 * log(randomValue(seed)));
    return rho * cos(theta);
}

// ref: https://math.stackexchange.com/a/1585996
float3 randomDirection(inout(uint) seed)
{
    float x = randomFromNormalDistribution(seed);
    float y = randomFromNormalDistribution(seed);
    float z = randomFromNormalDistribution(seed);
    return normalize(float3(x, y, z));
}

float3 randomDirection1(inout(uint) seed)
{
    // this is probably slower.

    float u = randomValue(seed);
    float v = randomValue(seed);
    float theta = 2 * PI * u;
    float phi = acos(2 * v - 1);
    float x = sin(phi) * cos(theta);
    float y = sin(phi) * sin(theta);
    float z = cos(phi);
    return float3(x, y, z);
}

#endif // RANDOM_H
